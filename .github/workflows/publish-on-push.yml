name: Publish on push (auto-tag release)

on:
  push:
    branches: [ main ]

jobs:
  prepare:
    name: Check version bump and create tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      should_tag: ${{ steps.decide.outputs.should_tag }}
      reason: ${{ steps.decide.outputs.reason }}
    steps:
      - uses: actions/checkout@v4

      - name: Get local and previous package.json versions
        id: versions
        run: |
          set -e
          # local version (on the pushed commit)
          local_version=$(node -p "require('./package.json').version")
          echo "local_version=$local_version" >> $GITHUB_OUTPUT

          # try to get package.json from previous commit
          if git rev-parse HEAD^ >/dev/null 2>&1; then
            git show HEAD^:package.json > /tmp/package_prev.json || true
          fi

          if [ -f /tmp/package_prev.json ]; then
            prev_version=$(node -p "require('/tmp/package_prev.json').version") || prev_version=""
          else
            prev_version=""
          fi
          echo "prev_version=$prev_version" >> $GITHUB_OUTPUT

      - name: Decide if we should tag
        id: decide
        run: |
          local=${{ steps.versions.outputs.local_version }}
          prev=${{ steps.versions.outputs.prev_version }}
          if [ "$local" = "$prev" ] || [ -z "$local" ]; then
            echo "should_tag=false" >> $GITHUB_OUTPUT
            echo "reason=No version bump detected or version empty" >> $GITHUB_OUTPUT
            exit 0
          fi
          echo "should_tag=true" >> $GITHUB_OUTPUT
          echo "reason=Version bumped from $prev to $local" >> $GITHUB_OUTPUT

      - name: Create and push tag
        if: steps.decide.outputs.should_tag == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          ver=${{ steps.versions.outputs.local_version }}
          tag="v${ver}"
          echo "Creating tag $tag"
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a "$tag" -m "Release $tag"
          git push origin "$tag"

  build_and_publish:
    name: Build, test and publish
    runs-on: ubuntu-latest
    needs: prepare
    if: needs.prepare.outputs.should_tag == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org/'

      - name: Install dependencies
        run: npm ci

      - name: Run lint
        run: npm run lint --if-present

      - name: Run tests
        run: npm test

      - name: Build package
        run: npm run build

      - name: Configure npm auth
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then echo "NPM_TOKEN secret is not set"; exit 1; fi
          echo "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}" > ~/.npmrc

      - name: Ensure package not private
        run: |
          node -e "const pkg=require('./package.json'); if(pkg.private){ console.error('package.json has private:true - aborting'); process.exit(1); }"

      - name: Prevent double publish (check npm)
        run: |
          pkg_name=$(node -p "require('./package.json').name")
          pkg_version=$(node -p "require('./package.json').version")
          remote_version=$(npm view "$pkg_name" version --registry https://registry.npmjs.org/ 2>/dev/null || true)
          if [ -n "$remote_version" ] && [ "$remote_version" = "$pkg_version" ]; then
            echo "Version $pkg_version already published on npm. Aborting.";
            exit 1
          fi

      - name: Publish package
        run: |
          npm publish --access public
